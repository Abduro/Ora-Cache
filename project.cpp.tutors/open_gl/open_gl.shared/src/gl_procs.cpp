/*
	Created by Tech_dog (ebontrop@gmail.com) on 06-Sep-2025 at 13:13:58.859, UTC+4, Batumi, Saturday;
	This is Ebo Pack OpenGL tutorials' procedures loader wrapper interface implementation file; 
*/
#include "gl_procs.h"
#include "shared.preproc.h"

using namespace ex_ui::draw::open_gl::procs;

namespace ex_ui { namespace draw { namespace open_gl { namespace _impl_1 { void __warning_lnk_4006 (void) {}}}}}

CBase:: CBase (void) { this->m_error >>__CLASS__<<__METHOD__<< __e_not_inited; }

TError&  CBase::Error (void) const { return this->m_error; }

PROC CBase::Get (_pc_sz _p_proc_name) {
	_p_proc_name;
	if (nullptr == _p_proc_name || 0 == ::_tcslen(_p_proc_name)) {
		this->m_error <<__METHOD__<< __e_inv_arg; return nullptr;
	}
	TProcCache::const_iterator found_ = this->m_cached.find(_p_proc_name);
	if (found_ != this->m_cached.end())
		return found_->second;

	CStringA cs_ansi(_p_proc_name);
	// https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-wglgetprocaddress?source=docs ;
	PROC p_proc = ::wglGetProcAddress(cs_ansi.GetString());
	if ( p_proc ) {
		try {
			this->m_cached.insert(::std::make_pair(CString(_p_proc_name), p_proc));
		}
		catch (const ::std::bad_alloc&) {
			this->m_error << __e_no_memory;
		}
	}
	// https://www.khronos.org/opengl/wiki/Load_OpenGL_Functions#Windows ;
	else if ( 0 == p_proc || (void*)0x1 == p_proc || (void*)0x2 == p_proc || (void*)0x3 == p_proc || (void*)-1 == p_proc )
	{		// https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya ;
		HMODULE h_module = ::LoadLibrary(_T("opengl32.dll"));
		if (0 ==h_module)
			this->m_error.Last();
		else {
			// https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress ;
			p_proc = ::GetProcAddress(h_module, cs_ansi.GetString());
			if (0 == p_proc) {
				this->m_error.Last(); this->m_error = TString().Format(_T("Get address of '%s' failed"), _p_proc_name);
			}
		}
	}
	else {
		this->m_error << (err_code) TErrCodes::eExecute::eFunction = TString().Format(_T("the proc '%s' is not found"), _p_proc_name);
	}
	return p_proc;
}

err_code CBase::Get_all (void) { return __e_not_impl; }

CString  CBase::Print (void) const {

	if (this->m_cached.empty()) {
		return CString(_T("#empty"));
	}
	
	CString cs_out;

	for (TProcCache::const_iterator it_ = this->m_cached.begin(); it_ != this->m_cached.end(); ++it_) {
		cs_out += _T("\t");
		cs_out += it_->first;
		cs_out += _T(";\n");
	}

	return cs_out;
}

/////////////////////////////////////////////////////////////////////////////

static _pc_sz buf_fun_names[] = {
	_T("glBindBuffer"), _T("glBufferData"), _T("glDeleteBuffers"), _T("glGenBuffers"), _T("glNamedBufferData")
};

CBuffer:: CBuffer (void) : CBase() { CString cs_cls = TString().Format(_T("%s::%s"), CBase::m_error.Class(), (_pc_sz)__CLASS__);
	CBase::m_error.Class(cs_cls, false);
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindBuffer.xhtml ;
err_code CBuffer::Bind (uint32_t _n_target, uint32_t _buff_id) {
	_n_target; _buff_id;
	/* Possible errors:
		GL_INVALID_ENUM is generated if target is not one of the allowable values.
		GL_INVALID_VALUE is generated if buffer is not a name previously returned from a call to glGenBuffers.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Bind p_fun = reinterpret_cast<pfn_Bind>(CBase::Get(buf_fun_names[0]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBufferData.xhtml ;
err_code CBuffer::Data (uint32_t _n_target, ptrdiff_t _n_size_n_size, const void* _p_data, uint32_t _n_usage) {
	_n_target; _n_size_n_size; _p_data; _n_usage;
	/* Possible errors:
		GL_INVALID_ENUM  is generated by glBufferData if target is not one of the accepted buffer targets.
		GL_INVALID_ENUM  is generated if usage is not GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
		GL_INVALID_VALUE is generated if size is negative.
		GL_INVALID_OPERATION is generated by glBufferData if the reserved buffer object name 0 is bound to target.
		GL_INVALID_OPERATION is generated if the GL_BUFFER_IMMUTABLE_STORAGE flag of the buffer object is GL_TRUE.
		GL_OUT_OF_MEMORY is generated if the GL is unable to create a data store with the specified size.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Data p_fun = reinterpret_cast<pfn_Data>(CBase::Get(buf_fun_names[1]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDeleteBuffers.xhtml ;
err_code CBuffer::Delete (int32_t  _n_count , const uint32_t* _p_buffers) {
	_n_count; _p_buffers;
	// GL_INVALID_VALUE is generated if _n_count is negative.
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Delete p_fun = reinterpret_cast<pfn_Delete>(CBase::Get(buf_fun_names[2]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGenBuffers.xhtml ;
err_code CBuffer::GenNames (int32_t _n_count, uint32_t* _p_names) {
	_n_count; _p_names;
	// GL_INVALID_VALUE is generated if _n_count is negative ;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_GenNames p_fun = reinterpret_cast<pfn_GenNames>(CBase::Get(buf_fun_names[3]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBufferData.xhtml ;
err_code CBuffer::Named (uint32_t _n_name, ptrdiff_t _n_size, const void* _p_data, uint32_t _n_usage) {
	_n_name; _n_size; _p_data; _n_usage;
	/* Possible errors:
		GL_INVALID_ENUM  is generated if usage is not GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
		GL_INVALID_VALUE is generated if size is negative.
		GL_INVALID_OPERATION is generated by glNamedBufferData if buffer is not the name of an existing buffer object.
		GL_INVALID_OPERATION is generated if the GL_BUFFER_IMMUTABLE_STORAGE flag of the buffer object is GL_TRUE.
		GL_OUT_OF_MEMORY is generated if the GL is unable to create a data store with the specified size.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Named p_fun = reinterpret_cast<pfn_Named>(CBase::Get(buf_fun_names[4]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

/////////////////////////////////////////////////////////////////////////////

static _pc_sz ctx_fun_names[] = { _T("wglChoosePixelFormatARB"), _T("wglCreateContextAttribsARB"), _T("wglSwapIntervalEXT") };

CContext:: CContext (void) : CBase() { CString cs_cls = TString().Format(_T("%s::%s"), CBase::m_error.Class(), (_pc_sz)__CLASS__);
	CBase::m_error.Class(cs_cls, false);
}

int32_t  CContext::ChoosePxFormatArb (HDC _h_dc, const int* _p_atts_i, const float* _p_atts_f, uint32_t _n_max_formats, int* _p_formats, uint32_t* _p_fmt_count) {
	_h_dc; _p_atts_i; _p_atts_f; _n_max_formats; _p_formats; _p_fmt_count;
	CBase::m_error << __METHOD__ << __s_ok;

	int32_t n_result = 0; // this is the failure result; in case of unsuccessful loading the function it will be returned to the caller;
	// https://www.khronos.org/opengl/wiki/Creating_an_OpenGL_Context_(WGL) ;
	// this is the function for creating draw renderer context;
	// it returns: 0 - this is the failure, otherwise the result value >0, that means success;
	pfn_ChoosePxFormatArb p_fun = reinterpret_cast<pfn_ChoosePxFormatArb>(CBase::Get(ctx_fun_names[0]));
	if (nullptr == p_fun)
		return n_result; // needs to be figured out of what result should be returned in case of failure; (done)

	n_result = p_fun(_h_dc, _p_atts_i, _p_atts_f, _n_max_formats, _p_formats, _p_fmt_count);
	return n_result;
}

HGLRC    CContext::CreateCtxAttsArb  (HDC _h_dc, HGLRC _h_shared_ctx, const int* p_att_lst) {
	_h_dc; _h_shared_ctx; p_att_lst;
	CBase::m_error << __METHOD__ << __s_ok;

	HGLRC h_render = nullptr;

	pfn_CreateCtxAttsArb p_fun = reinterpret_cast<pfn_CreateCtxAttsArb>(CBase::Get(ctx_fun_names[1]));
	if (nullptr == p_fun)
		return h_render;

	h_render = p_fun(_h_dc, _h_shared_ctx, p_att_lst);

	return h_render;
}

int32_t  CContext::SwapIntervalExt   (const int _n_interval) {
	_n_interval;
	CBase::m_error << __METHOD__ << __s_ok;

	int32_t n_result = 0;

	pfn_SwapIntervalExt p_fun = reinterpret_cast<pfn_SwapIntervalExt>(CBase::Get(ctx_fun_names[2]));
	if (nullptr == p_fun)
		return n_result; // needs to be figured out of what result should be returned in case of failure;

	n_result = p_fun(_n_interval);
	return n_result;
}

err_code CContext::Get_all (void) {
	CBase::m_error << __METHOD__ << __s_ok;

	for (uint32_t i_ = 0; i_ < _countof(ctx_fun_names); i_++) {
		if (nullptr == CBase::Get(ctx_fun_names[i_]))
			break;
	}

	return CBase::Error();
}

/////////////////////////////////////////////////////////////////////////////

static _pc_sz prog_fun_names[] = {
	_T("glAttachShader"), _T("glGetAttribLocation"), _T("glCreateProgram"), _T("glDeleteProgram"), _T("glGetProgramInfoLog"), _T("glLinkProgram"),
	_T("glGetProgramiv"), _T("glUseProgram"), _T("glValidateProgram")
};

CProg:: CProg (void) : CBase() { CString cs_cls = TString().Format(_T("%s::%s"), CBase::m_error.Class(), (_pc_sz)__CLASS__);
	CBase::m_error.Class(cs_cls, false);
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glAttachShader.xhtml ;
err_code CProg::Attach (uint32_t _prog_id, uint32_t _shader_id) {
	_prog_id; _shader_id;
	/* Possible errors:
		GL_INVALID_VALUE is generated if either program or shader is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if program is not a program object.
		GL_INVALID_OPERATION is generated if shader is not a shader object.
		GL_INVALID_OPERATION is generated if shader is already attached to program.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Attach p_fun = reinterpret_cast<pfn_Attach>(CBase::Get(prog_fun_names[0]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGetAttribLocation.xhtml ;
int32_t  CProg::AttLocate (uint32_t _prog_id, char* _p_name) {
	_prog_id; _p_name;
	/* Possible errors:
		GL_INVALID_OPERATION is generated if program is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if program is not a program object.
		GL_INVALID_OPERATION is generated if program has not been successfully linked.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	static const int32_t n_err_result = -1;

	int32_t n_result = n_err_result;

	pfn_AttLocate  p_fun = reinterpret_cast<pfn_AttLocate>(CBase::Get(prog_fun_names[1]));
	if (nullptr == p_fun)
		return n_result;

	return n_result;
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glCreateProgram.xhtml ;
uint32_t CProg::Create  (void){

	CBase::m_error << __METHOD__ << __s_ok;

	static const uint32_t n_err_result = 0;

	uint32_t n_result = n_err_result;

	pfn_Create  p_fun = reinterpret_cast<pfn_Create>(CBase::Get(prog_fun_names[2]));
	if (nullptr == p_fun)
		return n_result;

	return n_result;
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDeleteProgram.xhtml ;
err_code CProg::Delete  (uint32_t _prog_id){
	_prog_id;
	// GL_INVALID_VALUE is generated if program is not a value generated by OpenGL.
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Delete p_fun = reinterpret_cast<pfn_Delete>(CBase::Get(prog_fun_names[3]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGetProgramInfoLog.xhtml ;
err_code CProg::InfoLog (uint32_t _prog_id, int32_t _buf_size, int32_t* _log_len, char* _p_log){
	_prog_id; _buf_size; _log_len; _p_log;
	/* Possible errors:
		GL_INVALID_VALUE is generated if program is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if program is not a program object.
		GL_INVALID_VALUE is generated if maxLength is less than 0.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_InfoLog p_fun = reinterpret_cast<pfn_InfoLog>(CBase::Get(prog_fun_names[4]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glLinkProgram.xhtml ;
err_code CProg::Link    (uint32_t _prog_id){
	_prog_id;
	/* Possible errors:
		GL_INVALID_VALUE is generated if program is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if program is not a program object.
		GL_INVALID_OPERATION is generated if program is the currently active program object and transform feedback mode is active.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Link p_fun = reinterpret_cast<pfn_Link>(CBase::Get(prog_fun_names[5]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/es2.0/xhtml/glGetProgramiv.xml ;
err_code CProg::Params  (uint32_t _prog_id, uint32_t _p_name, int32_t* _p_params){
	_prog_id; _p_name; _p_params;
	/* Possible errors:
		GL_INVALID_ENUM is generated if pname is not an accepted value.
		GL_INVALID_VALUE is generated if program is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if program does not refer to a program object.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Params p_fun = reinterpret_cast<pfn_Params>(CBase::Get(prog_fun_names[6]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glUseProgram.xhtml ;
err_code CProg::Use (uint32_t _prog_id){
	_prog_id;
	/* Possible errors:
		GL_INVALID_VALUE is generated if program is neither 0 nor a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if program is not a program object.
		GL_INVALID_OPERATION is generated if program could not be made part of current state.
		GL_INVALID_OPERATION is generated if transform feedback mode is active.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Use p_fun = reinterpret_cast<pfn_Use>(CBase::Get(prog_fun_names[7]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glValidateProgram.xhtml ;
err_code CProg::Validate (uint32_t _prog_id){
	_prog_id;
	/* Possible errors:
		GL_INVALID_VALUE is generated if program is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if program is not a program object.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Validate p_fun = reinterpret_cast<pfn_Validate>(CBase::Get(prog_fun_names[8]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

/////////////////////////////////////////////////////////////////////////////

static _pc_sz shader_fun_names[] = {
	_T("glCompileShader"),  _T("glCreateShader"),  _T("glDeleteShader"),  _T("glGetShaderInfoLog"),  _T("glGetShaderiv"),  _T("glShaderSource")
};

CShader:: CShader (void) : CBase() { CString cs_cls = TString().Format(_T("%s::%s"), CBase::m_error.Class(), (_pc_sz)__CLASS__);
	CBase::m_error.Class(cs_cls, false);
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glCompileShader.xhtml ;
err_code  CShader::Compile (uint32_t _shader_id) {
	_shader_id;
	/* Possible errors:
		GL_INVALID_VALUE is generated if shader is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if shader is not a shader object.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Compile p_fun = reinterpret_cast<pfn_Compile>(CBase::Get(shader_fun_names[0]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glCreateShader.xhtml ;
uint32_t  CShader::Create  (uint32_t _type) {
	_type;
	/* Possible errors:
		0 if an error occurs creating the shader object;
		GL_INVALID_ENUM is generated if shaderType is not an accepted value ;
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	static const uint32_t n_err_result = 0;

	uint32_t n_result = n_err_result;

	pfn_Create p_fun = reinterpret_cast<pfn_Create>(CBase::Get(shader_fun_names[1]));
	if (nullptr == p_fun)
		return n_result;

	return n_result;
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDeleteShader.xhtml ;
err_code  CShader::Delete  (uint32_t _shader_id) {
	_shader_id;
	// GL_INVALID_VALUE is generated if _shader_id is not a value generated by OpenGL.
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Delete p_fun = reinterpret_cast<pfn_Delete>(CBase::Get(shader_fun_names[2]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGetShaderInfoLog.xhtml ;
err_code  CShader::InfoLog (uint32_t _shader_id, int32_t _n_max_length, int32_t* _p_log_len, char* _p_log) {
	_shader_id; _n_max_length; _p_log_len; _p_log;
	/* Possible errors:
		GL_INVALID_VALUE is generated if shader is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if shader is not a shader object.
		GL_INVALID_VALUE is generated if maxLength is less than 0.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_InfoLog p_fun = reinterpret_cast<pfn_InfoLog>(CBase::Get(shader_fun_names[3]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/es2.0/xhtml/glGetShaderiv.xml ;
err_code  CShader::Params  (uint32_t _shader_id, uint32_t _param_type, int32_t* _p_params) {
	_shader_id; _param_type; _p_params;
	CBase::m_error << __METHOD__ << __s_ok;
	/* Possible errors:
		GL_INVALID_ENUM is generated if pname is not an accepted value.
		GL_INVALID_VALUE is generated if shader is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if pname is GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, or GL_SHADER_SOURCE_LENGTH but a shader compiler is not supported.
		GL_INVALID_OPERATION is generated if shader does not refer to a shader object.
	*/
	pfn_Params p_fun = reinterpret_cast<pfn_Params>(CBase::Get(shader_fun_names[4]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glShaderSource.xhtml ;
err_code  CShader::Source  (uint32_t _handle, int32_t _n_count, const char** const _p_string, const int32_t* _p_length) {
	_handle; _n_count; _p_string; _p_length;
	/* Possible errors:
		GL_INVALID_VALUE is generated if shader is not a value generated by OpenGL.
		GL_INVALID_OPERATION is generated if shader is not a shader object.
		GL_INVALID_VALUE is generated if count is less than 0.
	*/
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Source p_fun = reinterpret_cast<pfn_Source>(CBase::Get(shader_fun_names[5]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

/////////////////////////////////////////////////////////////////////////////

static _pc_sz vtx_fun_names[] = {
	_T("glVertexAttribPointer"), _T("glVertexAttribIPointer"), _T("glVertexAttribLPointer"), _T("glBindVertexArray"), _T("glDeleteVertexArrays"),
	_T("glDisableVertexAttribArray"), _T("glDisableVertexArrayAttrib"), _T("glEnableVertexAttribArray"), _T("glEnableVertexArrayAttrib"), _T("glGenVertexArrays")
};

CVertex:: CVertex (void) : CBase() { CString cs_cls = TString().Format(_T("%s::%s"), CBase::m_error.Class(), (_pc_sz)__CLASS__);
	CBase::m_error.Class(cs_cls, false);
}
/*
https://registry.khronos.org/OpenGL-Refpages/gl4/html/glVertexAttribPointer.xhtml ;
Error codes that may be returned:
	GL_INVALID_VALUE is generated if index is greater than or equal to GL_MAX_VERTEX_ATTRIBS.
	GL_INVALID_VALUE is generated if size is not 1, 2, 3, 4 or (for glVertexAttribPointer), GL_BGRA.
	GL_INVALID_ENUM  is generated if type is not an accepted value.
	GL_INVALID_VALUE is generated if stride is negative.
	GL_INVALID_OPERATION is generated if size is GL_BGRA and type is not GL_UNSIGNED_BYTE, GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV.
	GL_INVALID_OPERATION is generated if type is GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV and size is not 4 or GL_BGRA.
	GL_INVALID_OPERATION is generated if type is GL_UNSIGNED_INT_10F_11F_11F_REV and size is not 3.
	GL_INVALID_OPERATION is generated by glVertexAttribPointer if size is GL_BGRA and normalized is GL_FALSE.
	GL_INVALID_OPERATION is generated if zero is bound to the GL_ARRAY_BUFFER buffer object binding point and the pointer argument is not NULL.
*/
err_code CVertex::AttPtr (uint32_t _n_ndx, int32_t _n_size, uint32_t _n_type, uint16_t _b_norm, int32_t _n_stride, const void** _ptr) {
	_n_ndx; _n_size; _n_type; _b_norm; _n_stride; _ptr;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_AttPtr p_fun = reinterpret_cast<pfn_AttPtr>(CBase::Get(vtx_fun_names[0]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

err_code CVertex::AttPtr_I (uint32_t _n_ndx, int32_t _n_size, uint32_t _n_type, int32_t _n_stride, const void** _ptr) {
	_n_ndx; _n_size; _n_type; _n_stride; _ptr;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_AttPtr_I p_fun = reinterpret_cast<pfn_AttPtr_I>(CBase::Get(vtx_fun_names[1]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

err_code CVertex::AttPtr_L (uint32_t _n_ndx, int32_t _n_size, uint32_t _n_type, int32_t _n_stride, const void** _ptr) {
	_n_ndx; _n_size; _n_type; _n_stride; _ptr;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_AttPtr_L p_fun = reinterpret_cast<pfn_AttPtr_L>(CBase::Get(vtx_fun_names[2]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glBindVertexArray.xhtml ;
err_code CVertex::Bind   (uint32_t _arr_id) {
	_arr_id;
	// GL_INVALID_OPERATION is generated if array is not zero or the name of a vertex array object previously returned from a call to glGenVertexArrays;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Bind p_fun = reinterpret_cast<pfn_Bind>(CBase::Get(vtx_fun_names[3]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDeleteVertexArrays.xhtml ;
err_code CVertex::Delete (int32_t _n_count, const uint32_t* _p_arrays) {
	_n_count; _p_arrays;
	// GL_INVALID_VALUE is generated if _n_count is negative;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_Delete p_fun = reinterpret_cast<pfn_Delete>(CBase::Get(vtx_fun_names[4]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
/*
https://registry.khronos.org/OpenGL-Refpages/gl4/html/glEnableVertexAttribArray.xhtml ;
the error codes that may be returned by these functions:
	GL_INVALID_OPERATION is generated by glEnableVertexAttribArray and glDisableVertexAttribArray if no vertex array object is bound.
	GL_INVALID_OPERATION is generated by glEnableVertexArrayAttrib and glDisableVertexArrayAttrib if vaobj is not the name of an existing vertex array object.
	GL_INVALID_VALUE is generated if index is greater than or equal to GL_MAX_VERTEX_ATTRIBS.
*/
err_code CVertex::DisableAttArr (uint32_t _n_ndx) {
	_n_ndx;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_DisableAttArr p_fun = reinterpret_cast<pfn_DisableAttArr>(CBase::Get(vtx_fun_names[5]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

err_code CVertex::DisableArrAtt (uint32_t _arr_id, uint32_t _n_ndx) {
	_arr_id; _n_ndx;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_DisableArrAtt p_fun = reinterpret_cast<pfn_DisableArrAtt>(CBase::Get(vtx_fun_names[6]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

err_code CVertex::EnableAttArr (uint32_t _n_ndx) {
	_n_ndx;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_EnableAttArr p_fun = reinterpret_cast<pfn_EnableAttArr>(CBase::Get(vtx_fun_names[7]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}

err_code CVertex::EnableArrAtt (uint32_t _arr_id, uint32_t _n_ndx) {
	_arr_id; _n_ndx;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_EnableArrAtt p_fun = reinterpret_cast<pfn_EnableArrAtt>(CBase::Get(vtx_fun_names[8]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}
// https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGenVertexArrays.xhtml ;
err_code CVertex::GenNames (int32_t _n_count, uint32_t* _p_names) {
	_n_count; _p_names;
	// GL_INVALID_VALUE is generated if _n_count is negative ;
	CBase::m_error << __METHOD__ << __s_ok;

	pfn_GenNames p_fun = reinterpret_cast<pfn_GenNames>(CBase::Get(vtx_fun_names[9]));
	if (nullptr == p_fun)
		return CBase::Error();

	return CBase::Error();
}